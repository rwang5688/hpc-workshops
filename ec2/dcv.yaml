---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  OperatingSystem:
    Description: The Operating System type to stream
    Type: String
    Default: Windows
    AllowedValues:
    - Windows
    - Windows-NVIDIA-Graphics-Intensive
    - Windows-NVIDIA-Gaming
    - Windows-AMD-Graphics-Intensive
    - AmazonLinux2-x64
    - AmazonLinux2-x64-Graphics-Intensive
    - AmazonLinux2-ARM
  Password:
    Description: Password for the "Administrator" user on Windows instances or for
      "dcvuser" on Linux instances. The default password is Ch4ng3M3!
    Default: Ch4ng3M3!
    MinLength: '8'
    Type: String
    AllowedPattern: "^((?=.*[a-z])(?=.*[A-Z])(?=.*[\\d])|(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_])|(?=.*[a-z])(?=.*[\\d])(?=.*[\\W_])|(?=.*[A-Z])(?=.*[\\d])(?=.*[\\W_])).+$"
    ConstraintDescription: 'Password must contain at least one element from three
      of the following sets: lowercase letters, uppercase letters, base 10 digits,
      non-alphanumeric characters'
    NoEcho: 'true'
  KeyName:
    Description: Name of an existing EC2 KeyPair to assign to the DCV instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  AllowList:
    Description: The source CIDR range allowed to connect to the DCV instance, leave
      0.0.0.0/0 to connect from any address. To limit access to a single IP address
      use x.x.x.x/32
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  StreamingPort:
    Description: The port to connect to the DCV instance on
    Type: String
    MinLength: '1'
    MaxLength: '5'
    Default: '8443'
    AllowedPattern: "^(102[4-9]|10[3-9]\\d|1[1-9]\\d{2}|[2-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$"
    ConstraintDescription: must be a valid TCP port 1024 - 65535.
  DiskSize:
    Description: Disk size in GB
    Type: Number
    Default: '50'
    MinValue: '30'
  VpcConfiguration:
    Description: Select 'Default' to use an existing default VPC and public Subnet; select 'New' to create a new VPC and public Subnet; select 'Custom' to specify an existing public Subnet below
    Type: String
    Default: 'Default'
    AllowedValues:
    - 'Default'
    - 'New'
    - 'Custom'
  ExistingSubnetId:
    Description: Id of an existing Subnet to use, required when 'VpcConfiguration' is 'Custom'
    Type: String
    Default: ''
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "DCV Host Configuration"
        Parameters: 
          - OperatingSystem
          - Password
          - KeyName
          - AllowList
          - StreamingPort
          - DiskSize
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcConfiguration
          - ExistingSubnetId
Mappings:
  AmiMap:
    Windows:
      Name: /aws/service/marketplace/prod-v4tsgpxs5ulxw/latest
      InstanceType: t2.medium
    Windows-NVIDIA-Graphics-Intensive:
      Name: /aws/service/marketplace/prod-qlg4bqqdecwn4/latest
      InstanceType: g5.xlarge
    Windows-NVIDIA-Gaming:
      Name: /aws/service/marketplace/prod-3jsztnviatfky/latest
      InstanceType: g5.xlarge
    Windows-AMD-Graphics-Intensive:
      Name: /aws/service/marketplace/prod-gdus6m3fb5s5c/latest
      InstanceType: g4ad.xlarge
    AmazonLinux2-x64:
      Name: /aws/service/marketplace/prod-copiwia5b4a2c/latest
      InstanceType: t2.medium
    AmazonLinux2-x64-Graphics-Intensive:
      Name: /aws/service/marketplace/prod-copiwia5b4a2c/latest
      InstanceType: g5.xlarge
    AmazonLinux2-ARM:
      Name: /aws/service/marketplace/prod-5cck6e3zgohpy/latest
      InstanceType: m6g.xlarge
Conditions:
  CreateWindowsResources: !Or 
      - !Equals ["Windows", !Ref OperatingSystem]
      - !Equals ["Windows-NVIDIA-Graphics-Intensive", !Ref OperatingSystem]
      - !Equals ["Windows-NVIDIA-Gaming", !Ref OperatingSystem]
      - !Equals ["Windows-AMD-Graphics-Intensive", !Ref OperatingSystem]
  CreateLinuxResources: !Or 
      - !Equals ["AmazonLinux2-x64", !Ref OperatingSystem]
      - !Equals ["AmazonLinux2-x64-Graphics-Intensive", !Ref OperatingSystem]
      - !Equals ["AmazonLinux2-ARM", !Ref OperatingSystem]
  UseDefaultVpcResources:
    !Equals [!Ref VpcConfiguration, "Default"]
  UseCustomVpcResources:
    !Equals [!Ref VpcConfiguration, "Custom"]
  CreateVpcResources:
    !Equals [!Ref VpcConfiguration, "New"]
Outputs:
  WindowsInstanceId:
    Value: !Ref DcvHostWindows
    Condition: CreateWindowsResources
  WindowsPublicDNS:
    Value: !GetAtt 
      - DcvHostWindows
      - PublicDnsName
    Condition: CreateWindowsResources
    Description: DNS Name of the newly created EC2 instance
  WindowsPublicIp:
    Value: !GetAtt 
      - DcvHostWindows
      - PublicIp
    Condition: CreateWindowsResources
    Description: Public Ip of the newly created EC2 instance
  WindowsDcvURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - DcvHostWindows
          - PublicIp
        - !Sub ':${StreamingPort}'
    Condition: CreateWindowsResources
    Description: Dcv connection URL for the newly created EC2 instance
  LinuxInstanceId:
    Value: !Ref DcvHostLinux
    Condition: CreateLinuxResources
  LinuxPublicDNS:
    Value: !GetAtt 
      - DcvHostLinux
      - PublicDnsName
    Condition: CreateLinuxResources
    Description: DNS Name of the newly created EC2 instance
  LinuxPublicIp:
    Value: !GetAtt 
      - DcvHostLinux
      - PublicIp
    Condition: CreateLinuxResources
    Description: Public Ip of the newly created EC2 instance
  LinuxDcvURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - DcvHostLinux
          - PublicIp
        - !Sub ':${StreamingPort}'
    Condition: CreateLinuxResources
    Description: Dcv connection URL for the newly created EC2 instance
Resources:
  DescribeSubnetsRole:
    Condition: UseCustomVpcResources
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeSubnets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ec2:DescribeSubnets
                Effect: Allow
                Resource: "*"
  GetVpcIdForSubnetId:
    Condition: UseCustomVpcResources
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !Sub ${DescribeSubnetsRole.Arn}
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback

          def handler(event, context):
            try:
              response = boto3.client('ec2').describe_subnets(
                  SubnetIds=[event['ResourceProperties']['SubnetId']]
              )

              id = response['Subnets'][0]['VpcId']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "ok")
  CustomVpcId:
    Condition: UseCustomVpcResources
    Type: Custom::GetVPC
    Properties:
      ServiceToken: !Sub ${GetVpcIdForSubnetId.Arn}
      SubnetId: !Ref ExistingSubnetId
  DcvVpc:
    Condition: CreateVpcResources
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: dcv-vpc
  DcvVpcPublicSubnet:
    Condition: CreateVpcResources
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DcvVpc
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: aws-cdk:subnet-name
        Value: public-subnet-1
      - Key: aws-cdk:subnet-type
        Value: Public
      - Key: Name
        Value: dcv-public-subnet
  DcvVpcPublicSubnetRouteTable:
    Condition: CreateVpcResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: DcvVpc
      Tags:
      - Key: Name
        Value: dcv-public-subnet
  DcvVpcPublicSubnetRouteTableAssociation:
    Condition: CreateVpcResources
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: DcvVpcPublicSubnetRouteTable
      SubnetId:
        Ref: DcvVpcPublicSubnet
  DcvVpcPublicSubnetDefaultRoute:
    Condition: CreateVpcResources
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: DcvVpcPublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: DcvVpcInternetGateway
    DependsOn:
    - DcvVpcGatewayAttachment
  DcvVpcInternetGateway:
    Condition: CreateVpcResources
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: dcv-vpc
  DcvVpcGatewayAttachment:
    Condition: CreateVpcResources
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: DcvVpc
      InternetGatewayId:
        Ref: DcvVpcInternetGateway
  DcvHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: dcv-host-security-group
      SecurityGroupIngress:
      - CidrIp: 
          Ref: AllowList
        Description: Allow DCV TCP inbound
        FromPort: 
          Ref: StreamingPort
        IpProtocol: tcp
        ToPort: 
          Ref: StreamingPort
      - CidrIp: 
          Ref: AllowList
        Description: Allow DCV UDP inbound
        FromPort: 
          Ref: StreamingPort
        IpProtocol: udp
        ToPort: 
          Ref: StreamingPort
      VpcId: 
        !If 
        - UseDefaultVpcResources
        - !Ref AWS::NoValue
        - !If [CreateVpcResources, !Ref DcvVpc, !Ref CustomVpcId] 
  DcvHostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ":iam::aws:policy/AmazonS3ReadOnlyAccess"
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ":iam::aws:policy/AmazonSSMManagedInstanceCore"
  DcvHostRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub 'arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*'
        - Action:
          - cloudformation:DescribeStackResource
          - cloudformation:SignalResource
          Effect: Allow
          Resource:
            Ref: AWS::StackId
        Version: '2012-10-17'
      PolicyName: DcvHostRoleDefaultPolicy
      Roles:
      - Ref: DcvHostRole
  DcvHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: DcvHostRole
  DcvHostLinux:
    Type: AWS::EC2::Instance
    Condition: CreateLinuxResources
    Properties:
      ImageId: !Sub
        - '{{resolve:ssm:${Value}}}'
        - { Value: !FindInMap [AmiMap, !Ref OperatingSystem, Name] }
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: !Ref DiskSize
      InstanceType: !FindInMap [AmiMap, !Ref OperatingSystem, InstanceType]
      KeyName:
        Ref: KeyName
      SecurityGroupIds: 
        !If
        - UseDefaultVpcResources
        - - !Ref DcvHostSecurityGroup
        - - !Ref AWS::NoValue
      NetworkInterfaces:
        !If
        - UseDefaultVpcResources
        - !Ref AWS::NoValue
        - - AssociatePublicIpAddress: 'True'
            DeleteOnTermination: 'True'
            SubnetId: !If [CreateVpcResources, !Ref DcvVpcPublicSubnet, !Ref ExistingSubnetId]
            DeviceIndex: '0'
            GroupSet:
            - Fn::GetAtt:
              - DcvHostSecurityGroup
              - GroupId
      IamInstanceProfile:
        Ref: DcvHostInstanceProfile
      Tags:
      - Key: Name
        Value: DcvHostLinux
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           yum update -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DcvHostLinux --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DcvHostLinux --region ${AWS::Region}
    DependsOn:
    - DcvHostSecurityGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/usr/local/dcv-server-linux.sh":
              content: !Sub |
                #!/bin/bash
                # Validate parameters
                if [ -z "$1" ]
                  then
                    echo "Missing username as 1st parameter"
                    exit
                fi

                if [ -z "$2" ]
                  then
                    echo "Missing password as 2nd parameter"
                    exit
                fi

                if [ -z "$3" ]
                  then
                    echo "Missing streaming port as 3rd parameter"
                    exit
                fi

                # Enable Quick & automatic-console-session
                sed -i '/^\[connectivity\]/a enable-quic-frontend=true' /etc/dcv/dcv.conf
                sed -i "/^\[connectivity\]/a web-port=$3" /etc/dcv/dcv.conf
                sed -i "/^\[connectivity\]/a quick-port=$3" /etc/dcv/dcv.conf
                sed -i '/^\[session-management]/a create-session = true' /etc/dcv/dcv.conf
                sed -i "/^\[session-management\/automatic-console-session]/a owner = \"$1\"" /etc/dcv/dcv.conf
                sed -i "/^\[session-management\/automatic-console-session]/a storage-root = \"%home%/session-storage\"" /etc/dcv/dcv.conf

                systemctl restart dcvserver

                # Create session storage dir for all users
                mkdir /etc/skel/session-storage

                # Create dcvuser and add to sudoers
                adduser $1
                echo "$1:$2" | chpasswd
                usermod -a -G wheel $1
              mode: '000644'
              owner: root
              group: root
          commands:
            dcv-server-linux:
              command:
                Fn::Join:
                - ''
                - - sh /usr/local/dcv-server-linux.sh
                  - " dcvuser "
                  - Ref: Password
                  - " "
                  - Ref: StreamingPort
              cwd: "~"
              ignoreErrors: 'false'
  DcvHostWindows:
    Type: AWS::EC2::Instance
    Condition: CreateWindowsResources
    Properties:
      ImageId: !Sub
        - '{{resolve:ssm:${Value}}}'
        - { Value: !FindInMap [AmiMap, !Ref OperatingSystem, Name] }
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: !Ref DiskSize
      InstanceType: !FindInMap [AmiMap, !Ref OperatingSystem, InstanceType]
      KeyName:
        Ref: KeyName
      SecurityGroupIds: 
        !If
        - UseDefaultVpcResources
        - - !Ref DcvHostSecurityGroup
        - - !Ref AWS::NoValue
      NetworkInterfaces:
        !If
        - UseDefaultVpcResources
        - !Ref AWS::NoValue
        - - AssociatePublicIpAddress: 'True'
            DeleteOnTermination: 'True'
            SubnetId: !If [CreateVpcResources, !Ref DcvVpcPublicSubnet, !Ref ExistingSubnetId]
            DeviceIndex: '0'
            GroupSet:
            - Fn::GetAtt:
              - DcvHostSecurityGroup
              - GroupId
      IamInstanceProfile:
        Ref: DcvHostInstanceProfile
      Tags:
      - Key: Name
        Value: DcvHostWindows
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe -v --stack ${AWS::StackId} --resource DcvHostWindows --region ${AWS::Region} --configsets default
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource DcvHostWindows --region ${AWS::Region}
          </script>
    DependsOn:
    - DcvHostSecurityGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "c:\\cfn\\dcv-server-windows.ps1":
              content: !Sub |
                [CmdletBinding()]
                param (
                    [Parameter(Mandatory=$false)]
                    [string] $AdminPassword,
                    [Parameter(Mandatory=$false)]
                    [string] $StreamingPort
                )

                function Set-DcvRegKey {
                    [CmdletBinding()]
                    Param(
                        [string]$RegistryPath = 'HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\connectivity',
                        [string]$RegistryKey,
                        [string]$Value,
                        [string]$Type = 'DWORD'
                    )

                    New-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::\$RegistryPath" -Name $RegistryKey -PropertyType $Type -Value $Value -force
                }

                function Set-UserPassword {
                    [CmdletBinding()]
                    Param(
                        [string]$AccountName = 'Administrator',
                        [string]$Password
                    )

                    $SecureString = ConvertTo-SecureString $Password -AsPlainText -Force

                    $UserAccount = Get-LocalUser -Name $AccountName
                    $UserAccount | Set-LocalUser -Password $SecureString
                }

                # Enable Quic
                Set-DcvRegKey -RegistryKey 'enable-quic-frontend' -Value '1'

                if ($StreamingPort) {
                  Set-DcvRegKey -RegistryKey 'web-port' -Value $StreamingPort
                  Set-DcvRegKey -RegistryKey 'quic-port' -Value $StreamingPort
                }

                # Configure Session Storage
                New-Item -Path C:\Users\Default\session-storage -Type Directory -force
                New-Item -Path C:\Users\Administrator\session-storage -Type Directory -force 
                Set-DcvRegKey -RegistryPath 'HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\session-management\automatic-console-session' -RegistryKey 'storage-root' -Type 'String' -Value '%home%\session-storage'
                
                Restart-Service dcvserver

                if ($AdminPassword) {
                    Set-UserPassword -Password $AdminPassword
                }
          commands:
            dcv-server-windows:
              command:
                Fn::Join:
                - ''
                - - powershell.exe -File "c:\\cfn\\dcv-server-windows.ps1" -AdminPassword
                  - " "
                  - Ref: Password
                  - " -StreamingPort"
                  - " "
                  - Ref: StreamingPort
              cwd: "~"
              ignoreErrors: 'true'
